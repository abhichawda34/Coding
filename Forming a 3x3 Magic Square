We define a magic square to be an nxn matrix of distinct positive integers from 1 to n^2 where the sum of any row, column, or diagonal of length 
is always equal to the same number: the magic constant.
You will be given a 3x3 matrix of integers in the inclusive range [1,9]. We can convert any digit a to any other digit b in the
range [1,9] at cost of |a-b|. Given s, convert it into a magic square at minimal cost. Print this cost on a new line.


Logic:
we can create maximum of 8 3x3 square matrix
Given a matrix check its difference with each of the 8 matrix and print the minimum cost.



int callHelper(vector<vector<int>> s, int mat[3][3])
{
    int count=0;
    for(int i=0;i<3;i++)
    {
        for(int j=0;j<3;j++)
        {
            if(s[i][j]!=mat[i][j])            
                count+=abs(s[i][j]-mat[i][j]);
        }
    }
    return count;
}


int formingMagicSquare(vector<vector<int>> s) {
    int ms[8][3][3] = { 
            { { 8, 1, 6 }, { 3, 5, 7 }, { 4, 9, 2 } }, 
            { { 6, 1, 8 }, { 7, 5, 3 }, { 2, 9, 4 } }, 
            { { 4, 9, 2 }, { 3, 5, 7 }, { 8, 1, 6 } }, 
            { { 2, 9, 4 }, { 7, 5, 3 }, { 6, 1, 8 } }, 
            { { 8, 3, 4 }, { 1, 5, 9 }, { 6, 7, 2 } }, 
            { { 4, 3, 8 }, { 9, 5, 1 }, { 2, 7, 6 } }, 
            { { 6, 7, 2 }, { 1, 5, 9 }, { 8, 3, 4 } }, 
            { { 2, 7, 6 }, { 9, 5, 1 }, { 4, 3, 8 } }, 
        }; 
    
    int ans=INT_MAX;
    for(int i=0;i<8;i++)
    {
        int temp=callHelper(s,ms[i]);
        cout<<temp<<" ";
        if(temp<ans)
            ans=temp;
    }
    cout<<endl;
    return ans;
}
